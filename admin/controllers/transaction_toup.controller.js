const config = require("../../admin/config/auth.config");
const db = require("../../admin/models");
const sequelize = db.sequelize;
const axios = require("axios");
const dbUser = require("../../app/models");
const TopupTransaction = dbUser.transaction;
const rewardAndPunishment = dbUser.transaction;
const NotifyForUser = dbUser.notify_for_user;
const User = dbUser.user;

exports.confirm_toup = async (req, res) => {
  try {
    const { transactionId, status } = req.body;
    // Ki·ªÉm tra xem tr·∫°ng th√°i c√≥ h·ª£p l·ªá hay kh√¥ng
    if (status !== "approved" && status !== "rejected") {
      return res.status(400).json({ message: "Invalid status" });
    }

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i c·ªßa giao d·ªãch n·∫°p ti·ªÅn
    const transaction = await TopupTransaction.findByPk(transactionId);
    // const transactioncheck = await TopupTransaction.findOne({
    //   where: { id: transactionId },
    // });
    if (!transaction) {
      return res.status(404).json({ message: "Transaction not found" });
    }
    // Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i c·ªßa giao d·ªãch
    if (transaction.status !== "pending") {
      return res
        .status(400)
        .json({ message: "Transaction status cannot be updated" });
    }
    transaction.status = status;
    await transaction.save();
    // N·∫øu tr·∫°ng th√°i l√† "approved", c·∫≠p nh·∫≠t s·ªë d∆∞ c·ªßa ng∆∞·ªùi d√πng
    if (status === "approved") {
      const user = await User.findByPk(transaction.user_id);
      if (!user) {
        return res.status(404).json({ message: "User not found" });
      }
      //L·∫•y t·ª∑ gi√° VND/USD
      // const reponse = await axios.get(
      //   "https://api.exchangerate-api.com/v4/latest/USD"
      // );
      // const { data } = await reponse;
      // const rate = data.rates.VND;

      // Chuy·ªÉn ƒë·ªïi s·ªë ti·ªÅn t·ª´ VND sang USD
      const usdAmount = (transaction.amount).toFixed(2);

      // C·ªông th√™m s·ªë ti·ªÅn v√†o tr∆∞·ªùng balance c·ªßa ng∆∞·ªùi d√πng
      user.balance = parseFloat(user.balance) + parseFloat(usdAmount);

      // L·∫•y gi√° tr·ªã balance hi·ªán t·∫°i c·ªßa ng∆∞·ªùi d√πng sau khi c·ªông th√™m
      const updatedUser = await user.save();
      const balanceNow = updatedUser.balance;

      // ******************
      // if (user.invitedCode) {
      //   // T√¨m ng∆∞·ªùi gi·ªõi thi·ªáu
      //   const referrer = await User.findOne({
      //     where: { referralCode: user.invitedCode },
      //   });

      //   // N·∫øu t√¨m th·∫•y ng∆∞·ªùi gi·ªõi thi·ªáu
      //   if (referrer) {
      //     // Ki·ªÉm tra xem ng∆∞·ªùi gi·ªõi thi·ªáu ƒë√£ nh·∫≠n ti·ªÅn th∆∞·ªüng ch∆∞a
      //     const hasReceivedBonus = await TopupTransaction.findOne({
      //       where: {
      //         user_id: referrer.id,
      //         typeTransaction: "bonus",
      //         amount: { [Sequelize.Op.gt]: 0 },
      //       },
      //     });
      //     // N·∫øu ng∆∞·ªùi gi·ªõi thi·ªáu ch∆∞a nh·∫≠n ti·ªÅn th∆∞·ªüng, c·ªông ti·ªÅn th∆∞·ªüng cho h·ªç
      //     if (!hasReceivedBonus) {
      //       const dataConfig = await Config.findAll({
      //         where: {
      //           id: 1,
      //         },
      //       });
      //       const bonusAmount = dataConfig[0].dataValues.bonus_refferal;
      //       console.log(
      //         "üöÄ ~ exports.confirm_toup= ~ bonusAmount:",
      //         bonusAmount
      //       );

      //       const usdAmount = (bonusAmount / rate).toFixed(2);
      //       console.log("üöÄ ~ exports.confirm_toup= ~ usdAmount:", usdAmount);
      //       // C·ªông th√™m s·ªë ti·ªÅn v√†o tr∆∞·ªùng balance c·ªßa ng∆∞·ªùi gi·ªõi thi·ªáu
      //       referrer.balance =
      //         parseFloat(referrer.balance) + parseFloat(usdAmount);

      //       // L·∫•y gi√° tr·ªã balance hi·ªán t·∫°i c·ªßa ng∆∞·ªùi gi·ªõi thi·ªáu sau khi c·ªông th√™m
      //       // await referrer.save();
      //       const updatedUserReferrer = await referrer.save();
      //       const balanceReferrerNow = updatedUserReferrer.balance;
      //       console.log(
      //         "üöÄ ~ exports.confirm_toup= ~ balanceReferrerNow:",
      //         balanceReferrerNow
      //       );
      //       // T·∫°o m·ªôt giao d·ªãch n·∫°p ti·ªÅn m·ªõi
      //       await TopupTransaction.create({
      //         user_id: referrer.id,
      //         amount: bonusAmount,
      //         typeTransaction: "bonus",
      //         amount_usd: usdAmount,
      //         status: "approved",
      //         balanceNow: balanceReferrerNow,
      //       });
      //       const notifyData = {
      //         user_id: referrer.id,
      //         title: "Gi·ªõi thi·ªáu th√†nh c√¥ng",
      //         content: `S·ªë ti·ªÅn ${usdAmount}$ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c c·ªông v√†o t√†i kho·∫£n.`,
      //       };
      //       console.log("üöÄ ~ exports.confirm_toup= ~ notifyData:", notifyData);
      //       await NotifyForUser.create(notifyData);
      //     }
      //   }
      // }
      // ******************

      // C·∫≠p nh·∫≠t tr∆∞·ªùng balanceNow trong b·∫£ng WithdrawalTransaction
      await transaction.update({ balanceNow });
      const notifyData = {
        user_id: user.id,
        title: "L·ªánh n·∫°p USD th√†nh c√¥ng",
        titleEnglish: "USD deposit order successful",
        content: `L·ªánh n·∫°p ${transaction.amount_usd}$ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c duy·ªát v√† c·ªông v√†o t√†i kho·∫£n.`,
        contentEnglish: `Your deposit order ${transaction.amount_usd}$ has been approved and added to your account.`,
      };
      await NotifyForUser.create(notifyData);
    } else if (status === "rejected") {
      const notifyData = {
        user_id: transaction.user_id,
        title: "L·ªánh n·∫°p USD th·∫•t b·∫°i",
        titleEnglish: "USD deposit order failed",
        content: `L·ªánh n·∫°p ${transaction.amount_usd}$ c·ªßa b·∫°n ƒë√£ b·ªã t·ª´ ch·ªëi.`,
        contentEnglish: `Your deposit ${transaction.amount_usd}$ has been rejected.`,
      };
      await NotifyForUser.create(notifyData);
      return res.status(200).json({ message: "Transaction rejected" });
    }
    res.status(200).json({ message: "Transaction updated successfully" });
  } catch (error) {
    res.status(500).json({ message: error });
  }
};
